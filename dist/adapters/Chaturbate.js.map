{"version":3,"sources":["../../src/adapters/Chaturbate.js"],"names":["BASE_URL","GET_STREAM_URL","ITEMS_PER_PAGE","SUPPORTED_TYPES","Chaturbate","BaseAdapter","_normalizeItem","item","type","id","name","genre","tags","banner","poster","posterShape","website","url","description","subject","popularity","viewers","isFree","_normalizeStream","stream","title","availability","live","_parseListPage","body","$","cheerio","load","tagRegexp","map","i","$item","$link","find","text","trim","attr","match","tag","slice","Number","toArray","_parseItemPage","split","_findByPage","query","page","options","keywords","search","httpClient","request","_getItem","_getStreams","form","json","method","headers","Referer","room_slug","bandwidth","success","room_status"],"mappings":"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","sourcesContent":["import cheerio from 'cheerio'\nimport BaseAdapter from './BaseAdapter'\n\n\nconst BASE_URL = 'https://chaturbate.com'\nconst GET_STREAM_URL = 'https://chaturbate.com/get_edge_hls_url_ajax/'\n// Chaturbate's number of items per page varies from load to load,\n// so this is the minimum number\nconst ITEMS_PER_PAGE = 60\nconst SUPPORTED_TYPES = ['tv']\n\n\nclass Chaturbate extends BaseAdapter {\n  static DISPLAY_NAME = 'Chaturbate'\n  static SUPPORTED_TYPES = SUPPORTED_TYPES\n  static ITEMS_PER_PAGE = ITEMS_PER_PAGE\n  static GENRES = []\n\n  _normalizeItem(item) {\n    return super._normalizeItem({\n      type: 'tv',\n      id: item.id,\n      name: item.id,\n      genre: item.tags,\n      banner: item.poster,\n      poster: item.poster,\n      posterShape: 'landscape',\n      website: item.url,\n      description: item.subject,\n      popularity: item.viewers,\n      isFree: true,\n    })\n  }\n\n  _normalizeStream(stream) {\n    return super._normalizeStream({\n      ...stream,\n      title: 'Watch',\n      availability: 1,\n      live: true,\n      isFree: true,\n    })\n  }\n\n  _parseListPage(body) {\n    let $ = cheerio.load(body)\n    let tagRegexp = /#\\S+/g\n    return $('.list > li').map((i, item) => {\n      let $item = $(item)\n      let $link = $item.find('.title > a')\n      let id = $link.text().trim()\n      let url = BASE_URL + $link.attr('href')\n      let subject = $item.find('.subject').text().trim()\n      let tags = (subject.match(tagRegexp) || []).map((tag) => tag.slice(1))\n      let poster = $item.find('img').attr('src')\n      let viewers = $item.find('.cams').text().match(/(\\d+) viewers/i)\n      viewers = viewers && Number(viewers[1])\n      return { id, url, subject, poster, tags, viewers }\n    }).toArray()\n  }\n\n  _parseItemPage(body) {\n    let $ = cheerio.load(body)\n    let tagRegexp = /#\\S+/g\n    let url = $('meta[property=\"og:url\"]').attr('content')\n    let id = url.split('/').slice(-2, -1)[0]\n    let subject = $('meta[property=\"og:description\"]').attr('content').trim()\n    let tags = (subject.match(tagRegexp) || []).map((tag) => tag.slice(1))\n    let poster = $('meta[property=\"og:image\"]').attr('content')\n    return { id, url, subject, poster, tags }\n  }\n\n  async _findByPage(query, page) {\n    let options = {\n      query: {\n        page,\n        keywords: query.search,\n      },\n    }\n    let url = query.genre ? `${BASE_URL}/tag/${query.genre}` : BASE_URL\n    let { body } = await this.httpClient.request(url, options)\n    return this._parseListPage(body)\n  }\n\n  async _getItem(type, id) {\n    let url = `${BASE_URL}/${id}`\n    let { body } = await this.httpClient.request(url)\n    return this._parseItemPage(body)\n  }\n\n  async _getStreams(type, id) {\n    let options = {\n      form: true,\n      json: true,\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'X-Requested-With': 'XMLHttpRequest',\n        Referer: `${BASE_URL}/${id}`,\n      },\n      body: {\n        /* eslint-disable-next-line camelcase */\n        room_slug: id,\n        bandwidth: 'high',\n      },\n    }\n    let { body } = await this.httpClient.request(GET_STREAM_URL, options)\n\n    if (body.success && body.room_status === 'public') {\n      return [{ id, url: body.url }]\n    } else {\n      return []\n    }\n  }\n}\n\n\nexport default Chaturbate\n"],"file":"Chaturbate.js"}