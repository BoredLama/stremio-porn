{"version":3,"sources":["../../src/adapters/PornCom.js"],"names":["BASE_URL","API_URL","VIDEOS_API_URL","ITEMS_PER_PAGE","SUPPORTED_TYPES","formatDuration","seconds","Number","minutesString","Math","floor","secondsString","slice","PornCom","BaseAdapter","_normalizeItem","item","type","id","name","title","genre","tags","banner","thumb","poster","posterShape","website","url","description","runtime","duration","undefined","year","Date","active_date","getFullYear","popularity","views","isFree","_normalizeStream","stream","quality","availability","live","_makeEmbedUrl","_makeDownloadUrl","_parseApiResponse","response","JSON","parse","success","Error","message","result","_extractQualitiesFromEmbedPage","body","match","map","filter","_getQualities","embedUrl","httpClient","request","_findByPage","query","page","options","json","limit","search","cats","_getItem","_getStreams","qualities"],"mappings":";;;;;;;AAAA;;;;;;;;AAGA,MAAMA,WAAW,sBAAjB;AACA,MAAMC,UAAU,sBAAhB;AACA,MAAMC,iBAAkB,GAAED,OAAQ,mBAAlC;AACA,MAAME,iBAAiB,EAAvB;AACA,MAAMC,kBAAkB,CAAC,OAAD,CAAxB;;AAGA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/BA,YAAUC,OAAOD,OAAP,CAAV;AACA,MAAIE,gBAAgBC,KAAKC,KAAL,CAAWJ,UAAU,EAArB,CAApB;AACA,MAAIK,gBAAiB,IAAGL,UAAU,EAAG,EAAjB,CAAmBM,KAAnB,CAAyB,CAAC,CAA1B,CAApB;AACA,SAAQ,GAAEJ,aAAc,IAAGG,aAAc,EAAzC;AACD;;AAGD,MAAME,OAAN,SAAsBC,oBAAtB,CAAkC;AAMhCC,iBAAeC,IAAf,EAAqB;AACnB,WAAO,MAAMD,cAAN,CAAqB;AAC1BE,YAAM,OADoB;AAE1BC,UAAIF,KAAKE,EAFiB;AAG1BC,YAAMH,KAAKI,KAHe;AAI1BC,aAAOL,KAAKM,IAJc;AAK1BC,cAAQP,KAAKQ,KALa;AAM1BC,cAAQT,KAAKQ,KANa;AAO1BE,mBAAa,WAPa;AAQ1BC,eAASX,KAAKY,GARY;AAS1BC,mBAAab,KAAKY,GATQ;AAU1BE,eAASd,KAAKe,QAAL,GAAgB1B,eAAeW,KAAKe,QAApB,CAAhB,GAAgDC,SAV/B;AAW1BC,YAAM,IAAIC,IAAJ,CAASlB,KAAKmB,WAAd,EAA2BC,WAA3B,EAXoB;AAY1BC,kBAAYrB,KAAKsB,KAAL,IAAc/B,OAAOS,KAAKsB,KAAZ,CAZA;AAa1BC,cAAQ;AAbkB,KAArB,CAAP;AAeD;;AAEDC,mBAAiBC,MAAjB,EAAyB;AACvB,WAAO,MAAMD,gBAAN,CAAuB;AAC5BtB,UAAIuB,OAAOvB,EADiB;AAE5BU,WAAKa,OAAOb,GAFgB;AAG5BR,aAAQ,GAAEqB,OAAOC,OAAQ,GAHG;AAI5BC,oBAAc,CAJc;AAK5BC,YAAM,IALsB;AAM5BL,cAAQ;AANoB,KAAvB,CAAP;AAQD;;AAEDM,gBAAc3B,EAAd,EAAkB;AAChB,WAAQ,GAAElB,QAAS,iBAAgBkB,EAAG,EAAtC;AACD;;AAED4B,mBAAiB5B,EAAjB,EAAqBwB,OAArB,EAA8B;AAC5B,WAAQ,GAAE1C,QAAS,aAAY0C,OAAQ,IAAGxB,EAAG,MAA7C;AACD;;AAED6B,oBAAkBC,QAAlB,EAA4B;AAC1B,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,iBAAWC,KAAKC,KAAL,CAAWF,QAAX,CAAX;AACD;;AAED,QAAI,CAACA,SAASG,OAAd,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAUJ,SAASK,OAAnB,CAAN;AACD;;AAED,WAAOL,SAASM,MAAhB;AACD;;AAEDC,iCAA+BC,IAA/B,EAAqC;AACnC,WAAOA,KACJC,KADI,CACE,gCADF,EACoC;AADpC,KAEJC,GAFI,CAEC1C,IAAD,IAAUA,KAAKyC,KAAL,CAAW,KAAX,EAAkB,CAAlB,CAFV,EAEgC;AAFhC,KAGJE,MAHI,CAGIjB,OAAD,IAAanC,OAAOmC,OAAP,IAAkB,GAHlC,CAAP,CADmC,CAIW;AAC/C;;AAEKkB,eAAN,CAAoB1C,EAApB,EAAwB;AAAA;;AAAA;AACtB,UAAI2C,WAAW,MAAKhB,aAAL,CAAmB3B,EAAnB,CAAf;;AACA,UAAI;AAAEsC;AAAF,gBAAiB,MAAKM,UAAL,CAAgBC,OAAhB,CAAwBF,QAAxB,CAArB;AACA,aAAO,MAAKN,8BAAL,CAAoCC,IAApC,CAAP;AAHsB;AAIvB;;AAEKQ,aAAN,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAAA;;AAAA;AAC7B,UAAIC,UAAU;AACZC,cAAM,IADM;AAEZH,eAAO;AACLC,cADK;AAELG,iBAAOlE,cAFF;AAGLmE,kBAAQL,MAAMK,MAHT;AAILC,gBAAMN,MAAM5C;AAJP;AAFK,OAAd;AASA,UAAI;AAAEmC;AAAF,gBAAiB,OAAKM,UAAL,CAAgBC,OAAhB,CAAwB7D,cAAxB,EAAwCiE,OAAxC,CAArB;AACA,aAAO,OAAKpB,iBAAL,CAAuBS,IAAvB,CAAP;AAX6B;AAY9B;;AAEKgB,UAAN,CAAevD,IAAf,EAAqBC,EAArB,EAAyB;AAAA;;AAAA;AACvB,UAAIiD,UAAU;AACZC,cAAM,IADM;AAEZH,eAAO;AAAE/C,YAAF;AAAMmD,iBAAO;AAAb;AAFK,OAAd;AAIA,UAAI;AAAEb;AAAF,gBAAiB,OAAKM,UAAL,CAAgBC,OAAhB,CAAwB7D,cAAxB,EAAwCiE,OAAxC,CAArB;AACA,aAAO,OAAKpB,iBAAL,CAAuBS,IAAvB,EAA6B,CAA7B,CAAP;AANuB;AAOxB;;AAEKiB,aAAN,CAAkBxD,IAAlB,EAAwBC,EAAxB,EAA4B;AAAA;;AAAA;AAC1B,UAAIwD,kBAAkB,OAAKd,aAAL,CAAmB1C,EAAnB,CAAtB;AACA,aAAOwD,UAAUhB,GAAV,CAAehB,OAAD,IAAa;AAChC,YAAId,MAAM,OAAKkB,gBAAL,CAAsB5B,EAAtB,EAA0BwB,OAA1B,CAAV;;AACA,eAAO;AAAExB,YAAF;AAAMU,aAAN;AAAWc;AAAX,SAAP;AACD,OAHM,CAAP;AAF0B;AAM3B;;AAjG+B;;gEAA5B7B,O,kBACkB,U,sBACGT,e,qBACDD,c,aACR,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,C;;eAiGHU,O","sourcesContent":["import BaseAdapter from './BaseAdapter'\n\n\nconst BASE_URL = 'https://www.porn.com'\nconst API_URL = 'https://api.porn.com'\nconst VIDEOS_API_URL = `${API_URL}/videos/find.json`\nconst ITEMS_PER_PAGE = 70\nconst SUPPORTED_TYPES = ['movie']\n\n\nfunction formatDuration(seconds) {\n  seconds = Number(seconds)\n  let minutesString = Math.floor(seconds / 60)\n  let secondsString = `0${seconds % 60}`.slice(-2)\n  return `${minutesString}:${secondsString}`\n}\n\n\nclass PornCom extends BaseAdapter {\n  static DISPLAY_NAME = 'Porn.com'\n  static SUPPORTED_TYPES = SUPPORTED_TYPES\n  static ITEMS_PER_PAGE = ITEMS_PER_PAGE\n  static GENRES = ['milf', 'asian', 'gay']\n\n  _normalizeItem(item) {\n    return super._normalizeItem({\n      type: 'movie',\n      id: item.id,\n      name: item.title,\n      genre: item.tags,\n      banner: item.thumb,\n      poster: item.thumb,\n      posterShape: 'landscape',\n      website: item.url,\n      description: item.url,\n      runtime: item.duration ? formatDuration(item.duration) : undefined,\n      year: new Date(item.active_date).getFullYear(),\n      popularity: item.views && Number(item.views),\n      isFree: 1,\n    })\n  }\n\n  _normalizeStream(stream) {\n    return super._normalizeStream({\n      id: stream.id,\n      url: stream.url,\n      title: `${stream.quality}p`,\n      availability: 1,\n      live: true,\n      isFree: true,\n    })\n  }\n\n  _makeEmbedUrl(id) {\n    return `${BASE_URL}/videos/embed/${id}`\n  }\n\n  _makeDownloadUrl(id, quality) {\n    return `${BASE_URL}/download/${quality}/${id}.mp4`\n  }\n\n  _parseApiResponse(response) {\n    if (typeof response === 'string') {\n      response = JSON.parse(response)\n    }\n\n    if (!response.success) {\n      throw new Error(response.message)\n    }\n\n    return response.result\n  }\n\n  _extractQualitiesFromEmbedPage(body) {\n    return body\n      .match(/['\"]?id['\"]?:\\s*['\"]\\d+p['\"]/gi) // Find id:\"240p\"\n      .map((item) => item.match(/\\d+/)[0]) // Extract 240\n      .filter((quality) => Number(quality) < 360) // 360+ are restricted\n  }\n\n  async _getQualities(id) {\n    let embedUrl = this._makeEmbedUrl(id)\n    let { body } = await this.httpClient.request(embedUrl)\n    return this._extractQualitiesFromEmbedPage(body)\n  }\n\n  async _findByPage(query, page) {\n    let options = {\n      json: true,\n      query: {\n        page,\n        limit: ITEMS_PER_PAGE,\n        search: query.search,\n        cats: query.genre,\n      },\n    }\n    let { body } = await this.httpClient.request(VIDEOS_API_URL, options)\n    return this._parseApiResponse(body)\n  }\n\n  async _getItem(type, id) {\n    let options = {\n      json: true,\n      query: { id, limit: 1 },\n    }\n    let { body } = await this.httpClient.request(VIDEOS_API_URL, options)\n    return this._parseApiResponse(body)[0]\n  }\n\n  async _getStreams(type, id) {\n    let qualities = await this._getQualities(id)\n    return qualities.map((quality) => {\n      let url = this._makeDownloadUrl(id, quality)\n      return { id, url, quality }\n    })\n  }\n}\n\n\nexport default PornCom\n"],"file":"PornCom.js"}