{"version":3,"sources":["../../src/adapters/HubTrafficAdapter.js"],"names":["HubTrafficAdapter","BaseAdapter","_normalizeItem","item","video","TAGS_TO_SKIP","constructor","tags","Object","values","map","tag","tag_name","filter","includes","toLowerCase","type","id","video_id","name","title","trim","genres","background","thumb","poster","posterShape","releaseInfo","publish_date","split","website","url","description","runtime","duration","_normalizeStream","stream","quality","availability","isFree","_makeMethodUrl","Error","_makeEmbedUrl","_extractStreamsFromEmbed","_requestApi","method","params","options","json","URL","keys","forEach","undefined","searchParams","set","body","httpClient","request","code","err","message","Number","_findByPage","query","page","ITEMS_PER_PAGE","newQuery","genre","search","period","ordering","thumbsize","result","videos","length","monthlyVideos","concat","slice","_getItem","VIDEO_ID_PARAMETER","_getStreams","streams"],"mappings":"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","sourcesContent":["import { URL } from 'url'\nimport BaseAdapter from './BaseAdapter'\n\n\n// https://www.hubtraffic.com/\nclass HubTrafficAdapter extends BaseAdapter {\n  static SUPPORTED_TYPES = ['movie']\n  static TAGS_TO_SKIP = []\n  static VIDEO_ID_PARAMETER = 'video_id'\n\n  _normalizeItem(item) {\n    let video = item.video || item\n    let { TAGS_TO_SKIP } = this.constructor\n    let tags = video.tags && Object.values(video.tags)\n      .map((tag) => {\n        return (typeof tag === 'string') ? tag : tag.tag_name\n      })\n      .filter((tag) => !TAGS_TO_SKIP.includes(tag.toLowerCase()))\n\n    return super._normalizeItem({\n      type: 'movie',\n      id: video.video_id || video.id,\n      name: video.title.trim(),\n      genres: tags,\n      background: video.thumb,\n      poster: video.thumb,\n      posterShape: 'landscape',\n      releaseInfo: video.publish_date && video.publish_date.split('-')[0],\n      website: video.url,\n      description: video.url,\n      runtime: video.duration,\n    })\n  }\n\n  _normalizeStream(stream) {\n    let title =\n      (stream.title && stream.title.trim()) ||\n      (stream.quality && stream.quality.trim()) ||\n      'SD'\n\n    return super._normalizeStream({\n      ...stream,\n      title,\n      availability: 1,\n      isFree: 1,\n    })\n  }\n\n  _makeMethodUrl() {\n    throw new Error('Not implemented')\n  }\n\n  _makeEmbedUrl() {\n    throw new Error('Not implemented')\n  }\n\n  _extractStreamsFromEmbed() {\n    throw new Error('Not implemented')\n  }\n\n  async _requestApi(method, params) {\n    let options = {\n      json: true,\n    }\n    let url = this._makeMethodUrl(method)\n\n    if (params) {\n      url = new URL(url)\n      Object.keys(params).forEach((name) => {\n        if (params[name] !== undefined) {\n          url.searchParams.set(name, params[name])\n        }\n      })\n    }\n\n    let { body } = await this.httpClient.request(url, options)\n\n    // Ignore \"No Videos found!\"\" and \"No video with this ID.\" errors\n    // eslint-disable-next-line eqeqeq\n    if (body.code && body.code != 2001 && body.code != 2002) {\n      let err = new Error(body.message)\n      err.code = Number(body.code)\n      throw err\n    }\n\n    return body\n  }\n\n  async _findByPage(query, page) {\n    let { ITEMS_PER_PAGE } = this.constructor\n    let newQuery = {\n      'tags[]': !query.genre && !query.search ? 'teen' : query.genre,\n      search: query.search,\n      period: 'weekly',\n      ordering: 'mostviewed',\n      thumbsize: 'medium',\n      page,\n    }\n\n    let result = await this._requestApi('searchVideos', newQuery)\n    let videos = result.videos || result.video || []\n\n    // We retry with the monthly period in case there are too few weekly videos\n    if (!query.search && page === 1 && videos.length < ITEMS_PER_PAGE) {\n      newQuery.period = 'monthly'\n      let result = await this._requestApi('searchVideos', newQuery)\n      let monthlyVideos = result.videos || result.video || []\n      videos = videos.concat(monthlyVideos).slice(0, ITEMS_PER_PAGE)\n    }\n\n    return videos\n  }\n\n  async _getItem(type, id) {\n    let query = {\n      [this.constructor.VIDEO_ID_PARAMETER]: id,\n    }\n\n    return this._requestApi('getVideoById', query)\n  }\n\n  async _getStreams(type, id) {\n    let url = this._makeEmbedUrl(id)\n    let { body } = await this.httpClient.request(url)\n\n    let streams = this._extractStreamsFromEmbed(body)\n    return streams && streams.map((stream) => {\n      stream.id = id\n      return stream\n    })\n  }\n}\n\n\nexport default HubTrafficAdapter\n"],"file":"HubTrafficAdapter.js"}