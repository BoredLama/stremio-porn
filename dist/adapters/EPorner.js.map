{"version":3,"sources":["../../src/adapters/EPorner.js"],"names":["BASE_URL","ITEMS_PER_PAGE","SUPPORTED_TYPES","EPorner","BaseAdapter","_normalizePageItem","item","id","url","split","duration","replace","type","name","title","genre","tags","banner","image","poster","posterShape","website","description","runtime","isFree","_normalizeApiItem","keywords","_text","slice","map","keyword","trim","filter","length","sid","imgthumb","loc","lenghtmin","popularity","Number","views","_normalizeItem","_source","_normalizeStream","stream","quality","match","availability","live","_makeApiUrl","query","skip","limit","search","_makeMovieUrl","_makeVideoDownloadUrl","path","_parseApiResponse","xml","results","compact","movie","Array","isArray","_parseMoviePage","body","$","cheerio","load","attr","i","text","next","find","toArray","downloadUrls","link","href","_find","httpClient","request","_getItem","_getStreams","streamUrls","followRedirect","Promise","all","res","headers","location"],"mappings":"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","sourcesContent":["import { xml2js } from 'xml-js'\nimport cheerio from 'cheerio'\nimport BaseAdapter from './BaseAdapter'\n\n\nconst BASE_URL = 'https://www.eporner.com'\nconst ITEMS_PER_PAGE = 60\nconst SUPPORTED_TYPES = ['movie']\n\n\nclass EPorner extends BaseAdapter {\n  static DISPLAY_NAME = 'EPorner'\n  static SUPPORTED_TYPES = SUPPORTED_TYPES\n  static ITEMS_PER_PAGE = ITEMS_PER_PAGE\n  static GENRES = []\n\n  _normalizePageItem(item) {\n    let id = item.url.split('/')[4]\n    let duration = item.duration && item.duration\n      .replace('M', ':')\n      .replace(/[TS]/gi, '')\n\n    return {\n      type: 'movie',\n      id: id,\n      name: item.title,\n      genre: item.tags,\n      banner: item.image,\n      poster: item.image,\n      posterShape: 'landscape',\n      website: item.url,\n      description: item.url,\n      runtime: duration,\n      isFree: 1,\n    }\n  }\n\n  _normalizeApiItem(item) {\n    let tags = item.keywords && item.keywords._text\n      .split(',')\n      .slice(1)\n      .map((keyword) => keyword.trim())\n      .filter((keyword) => keyword.split(' ').length < 3)\n\n    return {\n      type: 'movie',\n      id: item.sid ? item.sid._text : item.id._text,\n      name: item.title._text,\n      genre: tags,\n      banner: item.imgthumb._text,\n      poster: item['imgthumb320x240']._text,\n      posterShape: 'landscape',\n      website: item.loc._text,\n      description: item.loc._text,\n      runtime: item.lenghtmin._text,\n      popularity: Number(item.views._text || 0),\n      isFree: 1,\n    }\n  }\n\n  _normalizeItem(item) {\n    if (item._source === 'moviePage') {\n      item = this._normalizePageItem(item)\n    } else {\n      item = this._normalizeApiItem(item)\n    }\n\n    return super._normalizeItem(item)\n  }\n\n  _normalizeStream(stream) {\n    let quality = stream.url.match(/-(\\d+)p/i)\n\n    return super._normalizeStream({\n      id: stream.id,\n      url: stream.url,\n      title: quality ? quality[1] : 'Watch',\n      availability: 1,\n      live: true,\n      isFree: true,\n    })\n  }\n\n  _makeApiUrl(query, skip, limit) {\n    let { search, genre } = query\n    let keywords\n\n    if (search && genre) {\n      keywords = `${genre},${search}`\n    } else {\n      keywords = search || genre || 'all'\n    }\n\n    keywords = keywords.replace(' ', '+')\n    return `${BASE_URL}/api_xml/${keywords}/${limit}/${skip}/adddate`\n  }\n\n  _makeMovieUrl(id) {\n    return `${BASE_URL}/hd-porn/${id}`\n  }\n\n  _makeVideoDownloadUrl(path) {\n    return BASE_URL + path\n  }\n\n  _parseApiResponse(xml) {\n    let results = xml2js(xml, {\n      compact: true,\n      trim: true,\n    })['eporner-data'].movie\n\n    if (!results) {\n      return []\n    } else if (!Array.isArray(results)) {\n      return [results]\n    } else {\n      return results\n    }\n  }\n\n  _parseMoviePage(body) {\n    let $ = cheerio.load(body)\n    let title = $('meta[property=\"og:title\"]')\n      .attr('content')\n      .replace(/(\\s*-\\s*)?EPORNER/i, '')\n    let description = $('meta[property=\"og:description\"]').attr('content')\n    let duration = description.match(/duration:\\s*((:?\\d)+)/i)[1]\n    let url = $('meta[property=\"og:url\"]').attr('content')\n    let image = $('meta[property=\"og:image\"]').attr('content')\n    let tags = $('#hd-porn-tags td')\n      .filter((i, item) => $(item).text().trim() === 'Tags:')\n      .next()\n      .find('a')\n      .map((i, item) => $(item).text().trim())\n      .toArray()\n    let downloadUrls = $('#hd-porn-dload a')\n      .map((i, link) => {\n        let href = $(link).attr('href')\n        return this._makeVideoDownloadUrl(href)\n      })\n      .toArray()\n\n    return {\n      _source: 'moviePage',\n      title, url, image, tags, duration, downloadUrls,\n    }\n  }\n\n  async _find(query, { skip, limit }) {\n    let url = this._makeApiUrl(query, skip, limit)\n    let { body } = await this.httpClient.request(url)\n    return this._parseApiResponse(body)\n  }\n\n  async _getItem(type, id) {\n    let url = this._makeMovieUrl(id)\n    let { body } = await this.httpClient.request(url)\n    return this._parseMoviePage(body)\n  }\n\n  async _getStreams(type, id) {\n    // Video downloads are restricted to 30 per day per guest\n\n    let url = this._makeMovieUrl(id)\n    let { body } = await this.httpClient.request(url)\n    let { downloadUrls } = this._parseMoviePage(body)\n\n    let streamUrls = downloadUrls.map((url) => {\n      return this.httpClient.request(url, { followRedirect: false })\n    })\n    streamUrls = await Promise.all(streamUrls)\n\n    return streamUrls\n      .map((res) => {\n        return { id, url: res.headers.location }\n      })\n      .filter((stream) => stream.url)\n  }\n}\n\n\nexport default EPorner\n"],"file":"EPorner.js"}