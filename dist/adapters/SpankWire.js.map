{"version":3,"sources":["../../src/adapters/SpankWire.js"],"names":["androidUA","SpankWire","HubTrafficAdapter","_makeMethodUrl","method","_makeEmbedUrl","id","_getStreams","type","fromUrl","body","httpClient","request","headers","regexp","urlMatches","exec","title","Error","url","replace","qualities","found","some","qual","includes","altQualities","toUpperCase"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA,MAAMA,YAAY,kJAAlB;;AAEA,MAAMC,SAAN,SAAwBC,0BAAxB,CAA0C;AAKxCC,iBAAeC,MAAf,EAAuB;AACrB,WAAQ,wDAAuDA,MAAO,EAAtE;AACD;;AAEDC,gBAAcC,EAAd,EAAkB;AAChB,WAAQ,wDAAuDA,EAAG,EAAlE;AACD;;AAEKC,aAAN,CAAkBC,IAAlB,EAAwBF,EAAxB,EAA4B;AAAA;;AAAA;AAC1B,YAAMG,UAAW,oCAAmCH,EAAG,GAAvD,CAD0B,CAE1B;;AACA,UAAI;AAAEI;AAAF,gBAAiB,MAAKC,UAAL,CAAgBC,OAAhB,CAAwBH,OAAxB,EAAiC;AAAEI,iBAAS;AAAE,wBAAcb;AAAhB;AAAX,OAAjC,CAArB;AAEA;AACA;AACA;;AACA,UAAIc,SAAS,6EAAb;AACA;;AACA,UAAIC,aAAaD,OAAOE,IAAP,CAAYN,IAAZ,CAAjB;AAEA,UAAIO,QAAQ,IAAZ;;AAEA,UAAI,CAACF,UAAD,IAAe,CAACA,WAAW,CAAX,CAApB,EAAmC;AACjC;AACAD,iBAAS,6EAAT;AACAC,qBAAaD,OAAOE,IAAP,CAAYN,IAAZ,CAAb;;AAEA,YAAI,CAACK,UAAD,IAAe,CAACA,WAAW,CAAX,CAApB,EAAmC;AACjC,gBAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;AACD,SAFD,MAEO;AACLD,kBAAQ,IAAR;AACD;AAEF;;AAED,UAAIE,MAAMJ,WAAW,CAAX,EACPK,OADO,CACC,UADD,EACa,UADb,CAAV,CA3B0B,CA4BS;;AAEnC,UAAID,IAAI,CAAJ,MAAW,GAAf,EAAoB;AAClBA,cAAO,UAASA,GAAI,EAApB;AACD;;AAED,YAAME,YAAY,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,CAAlB;AAEA,YAAMC,QAAQD,UAAUE,IAAV,CAAeC,QAAQ;AACnC,YAAIL,IAAIM,QAAJ,CAAa,MAAID,IAAJ,GAAS,IAAtB,CAAJ,EAAiC;AAC/BP,mBAAS,MAAMO,IAAN,GAAa,GAAtB;AACA,iBAAO,IAAP;AACD;AACF,OALa,CAAd;;AAOA,UAAI,CAACF,KAAL,EAAY;AACV,cAAMI,eAAe,CAAC,MAAD,EAAS,OAAT,CAArB;AAEAA,qBAAaH,IAAb,CAAkBC,QAAQ;AACxB,cAAIL,IAAIM,QAAJ,CAAa,MAAID,IAAJ,GAAS,GAAtB,CAAJ,EAAgC;AAC9BP,qBAAS,MAAMO,KAAKG,WAAL,EAAf;AACA,mBAAO,IAAP;AACD;AACF,SALD;AAMD;;AAED,aAAO,CAAC;AAAEV,aAAF;AAASE;AAAT,OAAD,CAAP;AAtD0B;AAuD3B;;AApEuC;;gDAApClB,S,kBACkB,W,qBACE,E,aACR,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,EAAqC,QAArC,EAA+C,YAA/C,EAA6D,MAA7D,EAAqE,QAArE,EAA+E,KAA/E,C;;eAsEHA,S","sourcesContent":["import HubTrafficAdapter from './HubTrafficAdapter'\n\nconst androidUA = 'Mozilla/5.0 (Linux; Android 8.0.0; TA-1053 Build/OPR1.170623.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3368.0 Mobile Safari/537.36'\n\nclass SpankWire extends HubTrafficAdapter {\n  static DISPLAY_NAME = 'SpankWire'\n  static ITEMS_PER_PAGE = 20\n  static GENRES = ['milf', 'asian', 'ebony', 'latina', 'hentai', 'babysitter', 'anal', 'public', 'gay']\n\n  _makeMethodUrl(method) {\n    return `https://www.spankwire.com/api/HubTrafficApiCall?data=${method}`\n  }\n\n  _makeEmbedUrl(id) {\n    return `https://www.spankwire.com/EmbedPlayer.aspx?ArticleId=${id}`\n  }\n\n  async _getStreams(type, id) {\n    const fromUrl = `https://www.spankwire.com/a/video${id}/`\n    // android user agent results in a much smaller page size\n    let { body } = await this.httpClient.request(fromUrl, { headers: { 'user-agent': androidUA } })\n\n    /* eslint-disable max-len */\n    // URL example:\n    // https://cdn1-mobile-spankwire.spankcdn.net/201811/26/25065251/mp4_720p_25065251.mp4?validfrom=1548762876&validto=1548791676&rate=531k&burst=1300k&hash=g8xUTRCfFKKbphgNZQK9VyXRWlw%3D\n    let regexp = /videoUrl_hd[\"']?\\s*:\\s*[\"']?(https?:\\\\?\\/\\\\?\\/[^.]+\\.spankcdn\\.net[^\"']+)/gi\n    /* eslint-enable max-len */\n    let urlMatches = regexp.exec(body)\n\n    let title = 'HD'\n\n    if (!urlMatches || !urlMatches[1]) {\n      // use sd version if hd is unavailable\n      regexp = /videoUrl_sd[\"']?\\s*:\\s*[\"']?(https?:\\\\?\\/\\\\?\\/[^.]+\\.spankcdn\\.net[^\"']+)/gi\n      urlMatches = regexp.exec(body)\n\n      if (!urlMatches || !urlMatches[1]) {\n        throw new Error('Unable to extract a stream URL from an android page')\n      } else {\n        title = 'SD'\n      }\n\n    }\n\n    let url = urlMatches[1]\n      .replace('-mobile-', '-public-') // works without this too\n\n    if (url[0] === '/') {\n      url = `https:/${url}`\n    }\n\n    const qualities = ['1080', '720', '480', '360', '240']\n\n    const found = qualities.some(qual => {\n      if (url.includes('_'+qual+'p_')) {\n        title += ' ' + qual + 'p'\n        return true\n      }\n    })\n\n    if (!found) {\n      const altQualities = ['high', 'ultra']\n\n      altQualities.some(qual => {\n        if (url.includes('_'+qual+'_')) {\n          title += ' ' + qual.toUpperCase()\n          return true\n        }\n      })\n    }\n\n    return [{ title, url }]\n  }\n\n}\n\n\nexport default SpankWire\n"],"file":"SpankWire.js"}